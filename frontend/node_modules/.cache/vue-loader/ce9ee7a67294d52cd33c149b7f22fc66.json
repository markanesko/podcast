{"remainingRequest":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/markanesko/projects/github.com/podcast/frontend/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/markanesko/projects/github.com/podcast/frontend/src/App.vue","mtime":1603463219860},{"path":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanesko/projects/github.com/podcast/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHBhcnNlVVJMIH0gZnJvbSAncnNzLXBhcnNlcicKCmltcG9ydCBmZWVkc2xpc3QgZnJvbSAnQC9jb21wb25lbnRzL2ZlZWRzbGlzdC52dWUnCmltcG9ydCBmZWVkdmlldyBmcm9tICdAL2NvbXBvbmVudHMvZmVlZHZpZXcudnVlJwppbXBvcnQgcGxheWVyIGZyb20gJ0AvY29tcG9uZW50cy9wbGF5ZXIudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgZmVlZHNsaXN0LCBmZWVkdmlldywgcGxheWVyIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmZWVkczoge30sCiAgICAgIHNlbGVjdGVkRmVlZDoge30sCiAgICAgIHNlbGVjdGVkVHJhY2s6ICIiLAogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIGZlZWRTZWxlY3QgKG5hbWUpIHsKICAgICAgaWYgKCF0aGlzLmZlZWRzW25hbWVdKSB0aGlzLnNlbGVjdGVkRmVlZCA9IHt9CiAgICAgIHRoaXMuc2VsZWN0ZWRGZWVkID0gdGhpcy5mZWVkc1tuYW1lXQogICAgfSwKICAgIAogICAgdHJhY2tTZWxlY3RlZCAodXJsKSB7CiAgICAgIGlmICghdXJsKSB0aGlzLnNlbGVjdGVkVHJhY2sgPSAiIgogICAgICB0aGlzLnNlbGVjdGVkVHJhY2sgPSB1cmwKICAgIH0sCgogIH0sCgogIG1vdW50ZWQoKSB7CiAgICBmZXRjaCgiL3N0YXRpYy9mZWVkcy5qc29uIikKICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkgKQogICAgICAudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMubGVuZ3RoKSB7CiAgICAgICAgICByZXMuZm9yRWFjaCggZmVlZCA9PiB7CiAgICAgICAgICAgIHBhcnNlVVJMKGZlZWQsIChlcnIsIGRhdGEpID0+IHsKICAgICAgICAgICAgICBpZiAoZXJyKSBjb25zb2xlLmVycm9yKGVycikKICAgICAgICAgICAgICB0aGlzLiRzZXQodGhpcy5mZWVkcywgZGF0YS5mZWVkLnRpdGxlLCBkYXRhLmZlZWQpCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhbGVydCgiTm8gcG9kY2FzdCB1cmxzIGZvdW5kIikKICAgICAgICB9CiAgICAgIH0pCiAgfQogIAp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div class=\"container\">\n\n    <h1> Simple podcast \n      <span class=\"pull-right\">\n        <player :track=\"selectedTrack\"/>\n      </span>\n    </h1>\n\n    <div class=\"row\">\n      <feedslist :feeds=\"feeds\" :selected-feed-title=\"selectedFeed.title\" @on-feed-seleted=\"feedSelected\"/>\n      <feedview :feed=\"selectedFeed\" :selected-track=\"selectedTrack\" @on-track-select=\"trackSelected\"/>\n      \n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { parseURL } from 'rss-parser'\n\nimport feedslist from '@/components/feedslist.vue'\nimport feedview from '@/components/feedview.vue'\nimport player from '@/components/player.vue'\n\nexport default {\n  components: { feedslist, feedview, player },\n\n  data() {\n    return {\n      feeds: {},\n      selectedFeed: {},\n      selectedTrack: \"\",\n    }\n  },\n\n  methods: {\n    feedSelect (name) {\n      if (!this.feeds[name]) this.selectedFeed = {}\n      this.selectedFeed = this.feeds[name]\n    },\n    \n    trackSelected (url) {\n      if (!url) this.selectedTrack = \"\"\n      this.selectedTrack = url\n    },\n\n  },\n\n  mounted() {\n    fetch(\"/static/feeds.json\")\n      .then(res => res.json() )\n      .then(res => {\n        if (res.length) {\n          res.forEach( feed => {\n            parseURL(feed, (err, data) => {\n              if (err) console.error(err)\n              this.$set(this.feeds, data.feed.title, data.feed)\n            })\n          })\n        } else {\n          alert(\"No podcast urls found\")\n        }\n      })\n  }\n  \n}\n</script>"]}]}